//params x:Number, y:Number, filter:String, wrap:String
//return color:uint

if (wrap == Context3DWrapMode.CLAMP) {
	if (x < 0) {
		x = 0;
	} else if (x > 1) {
		x = 1;
	}
	if (y < 0) {
		y = 0;
	} else if (y > 1) {
		y = 1;
	}
} else if (wrap == Context3DWrapMode.REPEAT) {
	if (x < 0) {
		x = 1 + x - int(x);
	} else if (x >= 1) {
		x = x - int(x);
		//					if (x == 0) x = 1;
	}
	if (y < 0) {
		y = 1 + y - int(y);
	} else if (y >= 1) {
		y = y-int(y);
		//					if (y == 0) y = 1;
	}
} else {
	throw new Error();
}

x *= _width1;
y *= _height;

var intX:uint = x;
var intY:uint = y;

var color:uint;

if (filter == Context3DTextureFilter.LINEAR) {
	var fracX:Number = x - intX;
	var fracY:Number = y - intY;
	
	var c1:uint;
	var c2:uint;
	var f:Number;
	
	var color0:uint;
	
	if (intX == _width1) {
		color0 = _source[int(intY * _width + intX)];
	} else {
		c1 = _source[int(intY * _width + intX)];
		c2 = _source[int(intY * _width + intX + 1)];
		f = fracX;
		
		include 'ColorHelper_lerp.define';
		
		color0 = blendColor;
	}
	
	if (intY == _height) {
		color = color0;
	} else {
		intY++;
		if (intY == _height) {
			c1 = color0;
			c2 = _source[int(intY * _width + intX)];
			f = fracY;
			
			include 'ColorHelper_lerp.define';
			
			color = blendColor;
		} else {
			c1 = _source[int(intY * _width + intX)];
			c2 = _source[int(intY * _width + intX + 1)];
			
			include 'ColorHelper_lerp.define';
			
			c2 = blendColor;
			
			c1 = color0;
			f = fracY;
			
			include 'ColorHelper_lerp.define';
			
			color = blendColor;
		}
	}
} else if (filter == Context3DTextureFilter.NEAREST) {
	if (intX >= 0.5) intX++;
	if (intY >= 0.5) intY++;
	color = _source[int((y - intY) * _width + (x - intX))];
} else {
	throw new Error();
}